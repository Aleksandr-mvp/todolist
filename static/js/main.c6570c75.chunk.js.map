{"version":3,"sources":["components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/TodoList/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","style","textAlign","TextField","variant","size","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","color","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","cursor","onDoubleClick","TodoList","tasksList","tasks","map","t","ListItem","id","disableGutters","divider","display","justifyContent","fontWeight","Checkbox","checked","isDone","changeTaskStatus","todoListID","marginRight","className","newTitle","changeTaskTitle","removeTask","flexDirection","height","Typography","align","changeTodoListTitle","removeTodoList","newTitleTask","addTask","List","ButtonGroup","fullWidth","Button","filter","changeTodoListFilter","ColorModeContext","React","createContext","toggleColorMode","App","theme","useTheme","colorMode","useContext","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","copyTasks","tl","getTasksForRender","todoListsComp","Grid","item","Paper","elevation","padding","width","AppBar","position","Toolbar","sx","edge","aria-label","ml","justifySelf","Menu","palette","mode","Container","fixed","container","newTodoListID","spacing","ToggleColorMode","setMode","useMemo","prevMode","createTheme","Provider","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c6570c75.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport {TextField, IconButton} from \"@mui/material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (itemTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                label={'Enter item title'}\r\n                helperText={error && 'Title is required!'}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                error={error}\r\n            />\r\n            <IconButton onClick={addItem} color={'primary'}>\r\n                <AddIcon/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    const spanStyle = {\r\n        cursor: \"pointer\",\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onBlur={offEditMode}\r\n                autoFocus={true}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span style={spanStyle} onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"../../App\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport {ListItem, Checkbox, IconButton, Typography, List, ButtonGroup, Button} from \"@mui/material\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (id: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n\r\n    const tasksList = props.tasks.map((t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(t.id, newTitle, props.todoListID)\r\n        }\r\n\r\n        return (\r\n            <ListItem\r\n                key={t.id} disableGutters divider style={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between'\r\n            }}>\r\n                <div style={{fontWeight: 'bold'}}>\r\n                    <Checkbox\r\n                        size={'small'}\r\n                        color={'primary'}\r\n                        checked={t.isDone}\r\n                        onChange={changeStatus}\r\n                        style={{marginRight: '15px'}}\r\n                    />\r\n                    {t.isDone\r\n                        ? <span className={\"is-done\"}>{t.title}</span>\r\n                        : <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                    }\r\n                </div>\r\n                <IconButton onClick={removeTask}>\r\n                    <HighlightOffIcon/>\r\n                </IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const onClickSetAllFilter = () => props.changeTodoListFilter(\"all\", props.todoListID)\r\n    const onClickSetActiveFilter = () => props.changeTodoListFilter(\"active\", props.todoListID)\r\n    const onClickSetCompletedFilter = () => props.changeTodoListFilter(\"completed\", props.todoListID)\r\n    const removeTodoList = () => props.removeTodoList(props.todoListID)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n    const addTask = (newTitleTask: string) => {\r\n        props.addTask(newTitleTask, props.todoListID)\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            height: '100%'\r\n        }}>\r\n            <Typography\r\n                variant={'h5'}\r\n                align={'center'}\r\n                style={{fontWeight: 'bold'}}\r\n            >\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList} size={'small'}>\r\n                    <HighlightOffIcon/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                <List>\r\n                    {tasksList}\r\n                </List>\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={'outlined'}\r\n                    size={'small'}\r\n                    fullWidth\r\n                >\r\n                    <Button\r\n                        color={props.filter === 'all' ? \"secondary\" : \"primary\"}\r\n                        onClick={onClickSetAllFilter}\r\n                    >All</Button>\r\n                    <Button\r\n                        color={props.filter === 'active' ? \"secondary\" : \"primary\"}\r\n                        onClick={onClickSetActiveFilter}\r\n                    >Active</Button>\r\n                    <Button\r\n                        color={props.filter === 'completed' ? \"secondary\" : \"primary\"}\r\n                        onClick={onClickSetCompletedFilter}\r\n                    >Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {TodoList} from \"./components/TodoList/TodoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\r\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    AppBar,\r\n    IconButton,\r\n    Button,\r\n    Typography,\r\n    Container,\r\n    Toolbar,\r\n    createTheme, useTheme, ThemeProvider, CssBaseline, ButtonGroup\r\n} from \"@mui/material\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst ColorModeContext = React.createContext({ toggleColorMode: () => {} });\r\nfunction App() {\r\n    //theme:\r\n    const theme = useTheme();\r\n    const colorMode = React.useContext(ColorModeContext);\r\n\r\n\r\n    //BLL:\r\n\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListID_2, title: \"What to buy\", filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"JS/TS\", isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Water\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = [{id: v1(), title, isDone: false}, ...tasks[todoListID]]\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const removeTask = (id: string, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== id)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const changeTaskStatus = (id: string, isDone: boolean, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(t => t.id === id ? {...t, isDone} : t)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const changeTaskTitle = (id: string, title: string, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(t => t.id === id ? {...t, title} : t)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl))\r\n    }\r\n\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n\r\n    }\r\n\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListID = v1()\r\n        setTodoLists([...todoLists, {id: newTodoListID, title: title, filter: 'all'}])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    const getTasksForRender = (filter: FilterValuesType, tasks: Array<TaskType>): Array<TaskType> => {\r\n        switch (filter) {\r\n            case \"completed\":\r\n                return tasks.filter(t => !t.isDone)\r\n            case \"active\":\r\n                return tasks.filter(t => t.isDone)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n\r\n    const todoListsComp = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={6}\r\n                       style={{\r\n                           padding: '15px',\r\n                           width: '300px',\r\n                           height: '400px'\r\n                       }}\r\n                >\r\n                    <TodoList\r\n                        todoListID={tl.id}\r\n                        filter={tl.filter}\r\n                        title={tl.title}\r\n                        tasks={getTasksForRender(tl.filter, tasks[tl.id])}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n\r\n    //UI:\r\n    return (\r\n\r\n                <div className=\"App\">\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar sx = {{justifyContent: \"space-between\"}}>\r\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ ml: 1, justifySelf: \"flex-start\" }}>\r\n                                <Menu/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\">\r\n                                Todolists\r\n                            </Typography>\r\n\r\n                            <ButtonGroup>\r\n                                <IconButton onClick={colorMode.toggleColorMode} color=\"inherit\">\r\n                                    {theme.palette.mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\r\n                                </IconButton>\r\n                                <Button color=\"inherit\" variant={\"outlined\"} sx={{ ml: 1, justifySelf: \"flex-end\" }}>Login</Button>\r\n                            </ButtonGroup>\r\n\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Container fixed>\r\n                        <Grid container justifyContent={'center'} style={{padding: '15px'}}>\r\n                            <Grid item>\r\n                                <AddItemForm addItem={addTodoList}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={5} justifyContent={'center'}>\r\n                            {todoListsComp}\r\n                        </Grid>\r\n                    </Container>\r\n                </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default function ToggleColorMode() {\r\n    const [mode, setMode] = React.useState<'light' | 'dark'>('light');\r\n    const colorMode = React.useMemo(\r\n        () => ({\r\n            toggleColorMode: () => {\r\n                setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n            },\r\n        }),\r\n        [],\r\n    );\r\n\r\n    const theme = React.useMemo(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    mode,\r\n                },\r\n            }),\r\n        [mode],\r\n    );\r\n\r\n    return (\r\n        <ColorModeContext.Provider value={colorMode}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <App />\r\n            </ThemeProvider>\r\n        </ColorModeContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}